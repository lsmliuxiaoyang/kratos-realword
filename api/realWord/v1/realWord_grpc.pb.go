// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: realWord/v1/realWord.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RealWord_SayHello_FullMethodName = "/realWord.v1.RealWord/SayHello"
	RealWord_SayHi_FullMethodName    = "/realWord.v1.RealWord/SayHi"
)

// RealWordClient is the client API for RealWord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealWordClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	SayHi(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (*HiReplay, error)
}

type realWordClient struct {
	cc grpc.ClientConnInterface
}

func NewRealWordClient(cc grpc.ClientConnInterface) RealWordClient {
	return &realWordClient{cc}
}

func (c *realWordClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, RealWord_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realWordClient) SayHi(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (*HiReplay, error) {
	out := new(HiReplay)
	err := c.cc.Invoke(ctx, RealWord_SayHi_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealWordServer is the server API for RealWord service.
// All implementations must embed UnimplementedRealWordServer
// for forward compatibility
type RealWordServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	SayHi(context.Context, *HiRequest) (*HiReplay, error)
	mustEmbedUnimplementedRealWordServer()
}

// UnimplementedRealWordServer must be embedded to have forward compatible implementations.
type UnimplementedRealWordServer struct {
}

func (UnimplementedRealWordServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedRealWordServer) SayHi(context.Context, *HiRequest) (*HiReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHi not implemented")
}
func (UnimplementedRealWordServer) mustEmbedUnimplementedRealWordServer() {}

// UnsafeRealWordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealWordServer will
// result in compilation errors.
type UnsafeRealWordServer interface {
	mustEmbedUnimplementedRealWordServer()
}

func RegisterRealWordServer(s grpc.ServiceRegistrar, srv RealWordServer) {
	s.RegisterService(&RealWord_ServiceDesc, srv)
}

func _RealWord_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealWordServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealWord_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealWordServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealWord_SayHi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealWordServer).SayHi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealWord_SayHi_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealWordServer).SayHi(ctx, req.(*HiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RealWord_ServiceDesc is the grpc.ServiceDesc for RealWord service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RealWord_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "realWord.v1.RealWord",
	HandlerType: (*RealWordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _RealWord_SayHello_Handler,
		},
		{
			MethodName: "SayHi",
			Handler:    _RealWord_SayHi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "realWord/v1/realWord.proto",
}
